// Clase abstracta Deportista
class Deportista {
    constructor(nombre, a√±oNacimiento) {
        this.nombre = nombre;                  
        this.a√±oNacimiento = a√±oNacimiento;  
        this.marcas = [];                      
        this.disciplina = null;                
    }

    // M√©todo abstracto (polim√≥rfico)
    obtenerMejorMarca() {
        throw new Error("Este m√©todo debe ser implementado en una subclase.");
    }

    // M√©todo abstracto para ordenar marcas
    marcasOrdenadas() {
        throw new Error("Este m√©todo debe ser implementado en una subclase.");
    }

    // M√©todo abstracto para a√±adir marcas con validaci√≥n
    a√±adirMarca(...marcas) {
        throw new Error("Este m√©todo debe ser implementado en una subclase.");
    }

    // M√©todo abstracto para asignar disciplina v√°lida
    a√±adirDisciplina(disciplina) {
        throw new Error("Este m√©todo debe ser implementado en una subclase.");
    }
}

// Subclase Atleta (usa tiempos)
class Atleta extends Deportista {
    constructor(nombre, a√±oNacimiento) {
        super(nombre, a√±oNacimiento); // Llama al constructor de Deportista
    }

    a√±adirDisciplina(disciplina) {
        const disciplinasValidas = ["100 metros lisos", "200 metros lisos", "200 metros vallas"];
        if (disciplinasValidas.includes(disciplina)) {
            this.disciplina = disciplina;
        } else {
            console.error("Disciplina no v√°lida para Atleta.");
        }
    }

    a√±adirMarca(...marcas) {
        let a√±adidas = 0;
        let rechazadas = 0;

        marcas.forEach(marca => {
            let intentos = 0;
            while (intentos < 3) {
                if (typeof marca === "number" && marca > 0 && marca < 60) {
                    this.marcas.push(marca);
                    a√±adidas++;
                    break;
                } else {
                    intentos++;
                    if (intentos === 3) {
                        console.warn(`Marca inv√°lida para Atleta: ${marca}`);
                        rechazadas++;
                    }
                }
            }
        });

        console.log(`${this.nombre}: ${a√±adidas} marcas a√±adidas, ${rechazadas} rechazadas.`);
    }

    obtenerMejorMarca() {
        const mejor = Math.min(...this.marcas);
        return `${mejor} segundos`;
    }

    marcasOrdenadas() {
        return this.marcas.slice().sort((a, b) => a - b).map(m => `${m} segundos`);
    }
}

// Subclase Lanzador (usa distancias)
class Lanzador extends Deportista {
    constructor(nombre, a√±oNacimiento) {
        super(nombre, a√±oNacimiento);
    }

    a√±adirDisciplina(disciplina) {
        const disciplinasValidas = ["jabalina", "peso"];
        if (disciplinasValidas.includes(disciplina)) {
            this.disciplina = disciplina;
        } else {
            console.error("Disciplina no v√°lida para Lanzador.");
        }
    }

    a√±adirMarca(...marcas) {
        let a√±adidas = 0;
        let rechazadas = 0;

        marcas.forEach(marca => {
            let intentos = 0;
            while (intentos < 3) {
                if (typeof marca === "number" && marca > 0) {
                    this.marcas.push(marca);
                    a√±adidas++;
                    break;
                } else {
                    intentos++;
                    if (intentos === 3) {
                        console.warn(`Marca inv√°lida para Lanzador: ${marca}`);
                        rechazadas++;
                    }
                }
            }
        });

        console.log(`${this.nombre}: ${a√±adidas} marcas a√±adidas, ${rechazadas} rechazadas.`);
    }

    obtenerMejorMarca() {
        const mejor = Math.max(...this.marcas);
        return `${mejor} metros`;
    }

    marcasOrdenadas() {
        return this.marcas.slice().sort((a, b) => b - a).map(m => `${m} metros`);
    }
}

// Clase EquipoOlimpico que gestiona a los deportistas
class EquipoOlimpico {
    constructor(procedencia) {
        this.procedencia = procedencia;   // Pa√≠s del equipo
        this.deportistas = [];            // Lista de deportistas
    }

    // Agrega un deportista al equipo
    a√±adirDeportista(deportista) {
        this.deportistas.push(deportista);
    }

    // Muestra mejor marca de cada deportista
    mostrarMejoresMarcasDeCadaDeportista() {
        console.log("‚ñ∂ Mejores marcas de cada deportista:");
        this.deportistas.forEach(dep => {
            console.log(`${dep.nombre} (${dep.disciplina}): ${dep.obtenerMejorMarca()}`);
        });
    }

    // Muestra mejor marca por disciplina
    mostrarMejoresMarcasPorDisciplina() {
        console.log("\nüèÖ Mejores marcas por disciplina:");
        const mejores = {};

        this.deportistas.forEach(dep => {
            if (!dep.disciplina) return;

            const actual = mejores[dep.disciplina];
            if (!actual) {
                mejores[dep.disciplina] = dep;
            } else {
                const nuevoEsMejor = dep instanceof Atleta
                    ? Math.min(...dep.marcas) < Math.min(...actual.marcas)
                    : Math.max(...dep.marcas) > Math.max(...actual.marcas);

                if (nuevoEsMejor) {
                    mejores[dep.disciplina] = dep;
                }
            }
        });

        for (const disc in mejores) {
            const dep = mejores[disc];
            console.log(`Disciplina: ${disc}, Mejor: ${dep.nombre}, Marca: ${dep.obtenerMejorMarca()}`);
        }
    }
}

const equipo = new EquipoOlimpico("Espa√±a");


const atleta1 = new Atleta("Sof√≠a", 1998);
const atleta2 = new Atleta("Pedro", 2000);
const atleta3 = new Atleta("Luc√≠a", 1997);
const lanzador1 = new Lanzador("Marcos", 1995);
const lanzador2 = new Lanzador("Elena", 1992);
const lanzador3 = new Lanzador("Iv√°n", 1990);

atleta1.a√±adirDisciplina("100 metros lisos");
atleta2.a√±adirDisciplina("200 metros lisos");
atleta3.a√±adirDisciplina("200 metros vallas");
lanzador1.a√±adirDisciplina("jabalina");
lanzador2.a√±adirDisciplina("peso");
lanzador3.a√±adirDisciplina("jabalina");


atletatleta1.a√±adirMarca(11.2, 10.8, 10.95);
atleta2.a√±adirMarca(21.4, 21.1);
atleta3.a√±adirMarca(24.3, 24.0, 23.9);
lanzador1.a√±adirMarca(62.5, 64.3);
lanzador2.a√±adirMarca(20.1, 19.7);
lanzador3.a√±adirMarca(65.1, 66.3);

equipo.a√±adirDeportista(atleta1);
equipo.a√±adirDeportista(atleta2);
equipo.a√±adirDeportista(atleta3);
equipo.a√±adirDeportista(lanzador1);
equipo.a√±adirDeportista(lanzador2);
equipo.a√±adirDeportista(lanzador3);

console.log("üéΩ EQUIPO OL√çMPICO -", equipo.procedencia);
equipo.mostrarMejoresMarcasDeCadaDeportista();
equipo.mostrarMejoresMarcasPorDisciplina();

console.log(`Marcas ordenadas de ${atleta1.nombre}:`, atleta1.marcasOrdenadas());
console.log(`Lanzamientos ordenados de ${lanzador1.nombre}:`, lanzador1.marcasOrdenadas());
